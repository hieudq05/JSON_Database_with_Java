<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/JSON Database with Java/task/src/server/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/JSON Database with Java/task/src/server/Main.java" />
              <option name="originalContent" value="package server;&#10;&#10;public class Main {&#10;&#10;    private static final String SERVER_HOST = &quot;127.0.0.1&quot;;&#10;    private static final int SERVER_PORT = 12346;&#10;&#10;    public static void main(String[] args) {&#10;        Service service = Service.getInstance();&#10;        service.startServer(SERVER_HOST, SERVER_PORT, 50);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server;&#10;&#10;public class Main {&#10;&#10;    private static final String SERVER_HOST = &quot;127.0.0.1&quot;;&#10;    private static final int SERVER_PORT = 12346;&#10;&#10;    public static void main(String[] args) {&#10;        Service service = Service.getInstance();&#10;        service.startServer(SERVER_HOST, SERVER_PORT, 50);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/JSON Database with Java/task/src/server/Server.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/JSON Database with Java/task/src/server/Server.java" />
              <option name="originalContent" value="package server;&#10;&#10;import java.net.InetAddress;&#10;import java.net.ServerSocket;&#10;&#10;class Server extends Thread {&#10;&#10;    private String host;&#10;    private int port;&#10;    private int backlog;&#10;&#10;    public Server(String host, int port, int backlog) {&#10;        this.host = host;&#10;        this.port = port;&#10;        this.backlog = backlog;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (&#10;                ServerSocket serverSocket = new ServerSocket(port, backlog, InetAddress.getByName(host));&#10;        ) {&#10;            System.out.println(&quot;Server started!&quot;);&#10;            while (true) {&#10;                Session session = new Session(serverSocket.accept());&#10;                session.start();&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server;&#10;&#10;import java.net.InetAddress;&#10;import java.net.ServerSocket;&#10;&#10;class Server extends Thread {&#10;&#10;    private String host;&#10;    private int port;&#10;    private int backlog;&#10;&#10;    public Server(String host, int port, int backlog) {&#10;        this.host = host;&#10;        this.port = port;&#10;        this.backlog = backlog;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (&#10;                ServerSocket serverSocket = new ServerSocket(port, backlog, InetAddress.getByName(host));&#10;        ) {&#10;            System.out.println(&quot;Server started!&quot;);&#10;                Session session = new Session(serverSocket.accept());&#10;                Session session = new Session(serverSocket.accept());&#10;                session.start();&#10;            }&#10;        } catch (Exception e) {&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/JSON Database with Java/task/src/server/Service.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/JSON Database with Java/task/src/server/Service.java" />
              <option name="originalContent" value="package server;&#10;&#10;import com.beust.jcommander.JCommander;&#10;&#10;import java.util.Map;&#10;&#10;public class Service {&#10;    private static Service instance;&#10;    private final Database database = new Database();&#10;&#10;    private Service() {}&#10;&#10;    public static Service getInstance() {&#10;        if (instance == null) {&#10;            instance = new Service();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    public void startServer(String host, int port, int backlog) {&#10;        Server server = new Server(host, port, backlog);&#10;        server.start();&#10;    }&#10;&#10;    public String processCommand(Object argsParams) {&#10;        Args args = new Args();&#10;&#10;        JCommander.newBuilder()&#10;                .addObject(args)&#10;                .build()&#10;                .parse((String[]) argsParams);&#10;&#10;        return switch (args.getType()) {&#10;            case &quot;get&quot; -&gt; database.get(args.getIdx());&#10;            case &quot;delete&quot; -&gt; database.delete(args.getIdx()) ? &quot;OK&quot; : &quot;ERROR&quot;;&#10;            case &quot;set&quot; -&gt; database.set(args.getIdx(), args.getMsg()) ? &quot;OK&quot; : &quot;ERROR&quot;;&#10;            case &quot;exit&quot; -&gt; &quot;OK&quot;;&#10;            default -&gt; &quot;ERROR&quot;;&#10;        };&#10;    }&#10;&#10;    public Map&lt;Integer, String&gt; getDatabase() {&#10;        return database.getDatabase();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server;&#10;&#10;import com.beust.jcommander.JCommander;&#10;&#10;import java.util.Map;&#10;&#10;public class Service {&#10;    private static Service instance;&#10;    private final Database database = new Database();&#10;&#10;    private Service() {}&#10;&#10;    public static Service getInstance() {&#10;        if (instance == null) {&#10;            instance = new Service();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    public void startServer(String host, int port, int backlog) {&#10;        Server server = new Server(host, port, backlog);&#10;        server.start();&#10;    }&#10;&#10;    public String processCommand(Object argsParams) {&#10;        Args args = new Args();&#10;&#10;        JCommander.newBuilder()&#10;                .addObject(args)&#10;                .build()&#10;                .parse((String[]) argsParams);&#10;&#10;        return switch (args.getType()) {&#10;            case &quot;get&quot; -&gt; database.get(args.getIdx());&#10;            case &quot;delete&quot; -&gt; database.delete(args.getIdx()) ? &quot;OK&quot; : &quot;ERROR&quot;;&#10;            case &quot;set&quot; -&gt; database.set(args.getIdx(), args.getMsg()) ? &quot;OK&quot; : &quot;ERROR&quot;;&#10;            case &quot;exit&quot; -&gt; &quot;OK&quot;;&#10;            default -&gt; &quot;ERROR&quot;;&#10;        };&#10;    }&#10;&#10;    public Map&lt;Integer, String&gt; getDatabase() {&#10;        return database.getDatabase();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/JSON Database with Java/task/src/server/Session.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/JSON Database with Java/task/src/server/Session.java" />
              <option name="originalContent" value="package server;&#10;&#10;import com.beust.jcommander.JCommander;&#10;&#10;import java.io.DataOutputStream;&#10;import java.io.ObjectInputStream;&#10;import java.net.Socket;&#10;&#10;public class Session extends Thread {&#10;    private final Socket socket;&#10;    private final Service service = Service.getInstance();&#10;&#10;    public Session(Socket socket) {&#10;        this.socket = socket;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (&#10;                DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());&#10;                ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream())&#10;        ) {&#10;            Object input = inputStream.readObject();&#10;&#10;            String output = service.processCommand(input);&#10;&#10;            outputStream.writeUTF(output);&#10;&#10;            Args args = new Args();&#10;&#10;            JCommander.newBuilder()&#10;                    .addObject(args)&#10;                    .build()&#10;                    .parse((String[]) input);&#10;&#10;            if (args.getType().equals(&quot;exit&quot;)) {&#10;                System.exit(0);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server;&#10;&#10;import com.beust.jcommander.JCommander;&#10;&#10;import java.io.DataOutputStream;&#10;import java.io.ObjectInputStream;&#10;import java.net.Socket;&#10;&#10;public class Session extends Thread {&#10;    private final Socket socket;&#10;    private final Service service = Service.getInstance();&#10;&#10;    public Session(Socket socket) {&#10;        this.socket = socket;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (&#10;                DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());&#10;                ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream())&#10;        ) {&#10;            Object input = inputStream.readObject();&#10;&#10;            String output = service.processCommand(input);&#10;&#10;            outputStream.writeUTF(output);&#10;&#10;            Args args = new Args();&#10;&#10;            JCommander.newBuilder()&#10;                    .addObject(args)&#10;                    .build()&#10;                    .parse((String[]) input);&#10;&#10;            if (args.getType().equals(&quot;exit&quot;)) {&#10;                System.exit(0);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>