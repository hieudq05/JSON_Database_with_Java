<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/JSON Database with Java/task/src/client/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/JSON Database with Java/task/src/client/Main.java" />
              <option name="originalContent" value="package client;&#10;&#10;public class Main {&#10;    private static final String SERVER_HOST = &quot;127.0.0.1&quot;;&#10;    private static final int SERVER_PORT = 2610;&#10;&#10;    public static void main(String[] args) {&#10;        Client client = new Client(SERVER_HOST, SERVER_PORT, args);&#10;        client.start();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package client;&#10;&#10;public class Main {&#10;    private static final String SERVER_HOST = &quot;127.0.0.1&quot;;&#10;    private static final int SERVER_PORT = 2610;&#10;&#10;    public static void main(String[] args) {&#10;        Client client = new Client(SERVER_HOST, SERVER_PORT, args);&#10;        client.start();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ThreadExample.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ThreadExample.java" />
              <option name="updatedContent" value="public class ThreadExample extends Thread {&#10;    &#10;    @Override&#10;    public void run() {&#10;        System.out.println(&quot;Thread bắt đầu chạy&quot;);&#10;        try {&#10;            Thread.sleep(1000); // Giả lập công việc mất thời gian&#10;        } catch (InterruptedException e) {&#10;            e.printStackTrace();&#10;        }&#10;        System.out.println(&quot;Thread kết thúc&quot;);&#10;    }&#10;    &#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;=== Test với start() ===&quot;);&#10;        ThreadExample thread1 = new ThreadExample();&#10;        thread1.start(); // Tạo thread mới&#10;        System.out.println(&quot;Main thread kết thúc ngay sau khi gọi start()&quot;);&#10;        &#10;        System.out.println(&quot;\n=== Test với run() ===&quot;);&#10;        ThreadExample thread2 = new ThreadExample();&#10;        thread2.run(); // Chạy trong main thread&#10;        System.out.println(&quot;Main thread kết thúc sau khi run() hoàn thành&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>